{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Edge AI Trust Project AI at the edge has the opportunity to embody greater forms of trust by utilizing the local VPN. Taking advantage of the VPN to share data, replicate findings, or expose behavior could have the effect of increased overall application resiliency as well as contributing to accountability and explainability. We are standing up a small Nvidia Jetson Nano network using EdgeVPN. The applications we hope to deploy are federated learning and redundant learning models. The objective is to deploy co-resident tools that in effect \"sense and respond\" for enhanced accountability and explainability.","title":"Home"},{"location":"#edge-ai-trust-project","text":"AI at the edge has the opportunity to embody greater forms of trust by utilizing the local VPN. Taking advantage of the VPN to share data, replicate findings, or expose behavior could have the effect of increased overall application resiliency as well as contributing to accountability and explainability. We are standing up a small Nvidia Jetson Nano network using EdgeVPN. The applications we hope to deploy are federated learning and redundant learning models. The objective is to deploy co-resident tools that in effect \"sense and respond\" for enhanced accountability and explainability.","title":"Edge AI Trust Project"},{"location":"12-May-2021/","text":"12-May-2021","title":"12-May-2021"},{"location":"12-May-2021/#12-may-2021","text":"","title":"12-May-2021"},{"location":"install/","text":"Install the VPN","title":"Installing EdgeVPN"},{"location":"install/#install-the-vpn","text":"","title":"Install the VPN"},{"location":"kernel/","text":"Building a custom Kernel The stock kernel distributed with Ubuntu 18.04 for Jetson devices does not come with proper dependences to support the Open vSwitch virtual switch that EdgeVPN.io builds upon. While there are different ways to create a workflow to run Evio-enabled Jetson devices, such as cross-compilation and flashing a custom image, a simpler approach that works for development and testing is to boot up the Jetson device with the stock kernel/image, and build a new kernel that includes the proper dependences. NOTE: the process below has been tested on Jetson nano development kit devices. We have not tested other models of Jetson devices. Building the kernel Once you have booted the device into the stock kernel, you need to follow the approach outlined in the nVidia documentation to build a custom kernel You will need an nVidia developer account to be able to access kernel source files. Ensure your OS has proper dependences installed sudo apt update sudo apt install git-core sudo apt install build-essential bc Download and unpack kernel sources You can login with your nVidia dev account and browse the downloads page, then select the latest \u201cL4T Jetson Driver Package\u201d to download Copy the downloaded archive to your home directory on the nano, and expand it with: tar xf Tegra210_Linux_*.tbz2 Sync gode with git repoPermalink cd Linux_for_Tegra ./source_sync.sh When prompted, enter the git tag you want sync to, e.g. tegra-l4t-r32.5 You may be asked multiple times. Create baseline kernel build config filePermalink Select a directory for your build, e.g. /home/username/build-ovs TEGRA_KERNEL_OUT=/home/username/build-ovs cd ~/Linux_for_Tegra/sources/kernel/kernel-4.9 mkdir -p $TEGRA_KERNEL_OUT make ARCH=arm64 O=$TEGRA_KERNEL_OUT tegra_defconfig Edit .config to enable Open vSwitch modulesPermalink Now, you need to edit the .config file (with kernel build configuration parameters) to add Open vSwitch and GRE support as modules vi $TEGRA_KERNEL_OUT/.config Uncomment/add the following config entries: CONFIG_NET_IPGRE=m CONFIG_NET_IPGRE_DEMUX=m CONFIG_OPENVSWITCH=m CONFIG_OPENVSWITCH_GRE=m CONFIG_OPENVSWITCH_VXLAN=m Build the kernelPermalink make ARCH=arm64 O=$TEGRA_KERNEL_OUT -j4 You will be prompted about these (and perhaps other) options; enter your choices (N=no, m=module) manually: CONFIG_NET_MPLS_GSO=m CONFIG_MPLS_ROUTING=n CONFIG_PPTP=n This will take several minutes to complete\u2026 Copy kernel image and modulesPermalink Once the kernel is compiled, you need to copy the kernel image to /boot: sudo cp $TEGRA_KERNEL_OUT/arch/arm64/boot/Image /boot/Image-ovs You also need to install and copy kernel modules: sudo make ARCH=arm64 O=$TEGRA_KERNEL_OUT modules_install \\ INSTALL_MOD_PATH=~/Linux_for_Tegra/rootfs/ pushd ~/Linux_for_Tegra/rootfs tar --owner root --group root -cjf kernel-ovs-modules.tbz2 lib/modules popd pushd / tar -xf ~/Linux_for_Tegra/rootfs/kernel-ovs-modules.tbz2 popd Edit boot config filePermalink Edit /boot/extlinux/extlinux.conf as follows to boot from the new kernel you just built as the primary option: TIMEOUT 30 DEFAULT primary MENU TITLE L4T boot options LABEL primary MENU LABEL primary kernel LINUX /boot/Image-ovs INITRD /boot/initrd APPEND ${cbootargs} quiet root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 console=ttyS0,115200n8 console=tty0 fbcon=map:0 net.ifnames=0 When testing a custom kernel, it is recommended that you create a backup of the original kernel and add a new entry to this file so that the device can fallback to the original kernel. To do this: 1, Make a backup of the original kernel sudo cp /boot/Image /boot/Image.backup 2, Copy your custom kernel into /boot/Image 3, Uncomment below menu setting lines for the original kernel 4, Reboot LABEL backup MENU LABEL backup kernel LINUX /boot/Image INITRD /boot/initrd APPEND ${cbootargs} quiet root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 console=ttyS0,115200n8 console=tty0 fbcon=map:0 net.ifnames=0","title":"Building a custom kernel"},{"location":"kernel/#building-a-custom-kernel","text":"The stock kernel distributed with Ubuntu 18.04 for Jetson devices does not come with proper dependences to support the Open vSwitch virtual switch that EdgeVPN.io builds upon. While there are different ways to create a workflow to run Evio-enabled Jetson devices, such as cross-compilation and flashing a custom image, a simpler approach that works for development and testing is to boot up the Jetson device with the stock kernel/image, and build a new kernel that includes the proper dependences. NOTE: the process below has been tested on Jetson nano development kit devices. We have not tested other models of Jetson devices.","title":"Building a custom Kernel"},{"location":"kernel/#building-the-kernel","text":"Once you have booted the device into the stock kernel, you need to follow the approach outlined in the nVidia documentation to build a custom kernel You will need an nVidia developer account to be able to access kernel source files.","title":"Building the kernel"},{"location":"kernel/#ensure-your-os-has-proper-dependences-installed","text":"sudo apt update sudo apt install git-core sudo apt install build-essential bc","title":"Ensure your OS has proper dependences installed"},{"location":"kernel/#download-and-unpack-kernel-sources","text":"You can login with your nVidia dev account and browse the downloads page, then select the latest \u201cL4T Jetson Driver Package\u201d to download Copy the downloaded archive to your home directory on the nano, and expand it with: tar xf Tegra210_Linux_*.tbz2","title":"Download and unpack kernel sources"},{"location":"kernel/#sync-gode-with-git-repopermalink","text":"cd Linux_for_Tegra ./source_sync.sh When prompted, enter the git tag you want sync to, e.g. tegra-l4t-r32.5 You may be asked multiple times. Create baseline kernel build config filePermalink Select a directory for your build, e.g. /home/username/build-ovs TEGRA_KERNEL_OUT=/home/username/build-ovs cd ~/Linux_for_Tegra/sources/kernel/kernel-4.9 mkdir -p $TEGRA_KERNEL_OUT make ARCH=arm64 O=$TEGRA_KERNEL_OUT tegra_defconfig Edit .config to enable Open vSwitch modulesPermalink Now, you need to edit the .config file (with kernel build configuration parameters) to add Open vSwitch and GRE support as modules vi $TEGRA_KERNEL_OUT/.config Uncomment/add the following config entries: CONFIG_NET_IPGRE=m CONFIG_NET_IPGRE_DEMUX=m CONFIG_OPENVSWITCH=m CONFIG_OPENVSWITCH_GRE=m CONFIG_OPENVSWITCH_VXLAN=m Build the kernelPermalink make ARCH=arm64 O=$TEGRA_KERNEL_OUT -j4 You will be prompted about these (and perhaps other) options; enter your choices (N=no, m=module) manually: CONFIG_NET_MPLS_GSO=m CONFIG_MPLS_ROUTING=n CONFIG_PPTP=n This will take several minutes to complete\u2026 Copy kernel image and modulesPermalink Once the kernel is compiled, you need to copy the kernel image to /boot: sudo cp $TEGRA_KERNEL_OUT/arch/arm64/boot/Image /boot/Image-ovs You also need to install and copy kernel modules: sudo make ARCH=arm64 O=$TEGRA_KERNEL_OUT modules_install \\ INSTALL_MOD_PATH=~/Linux_for_Tegra/rootfs/ pushd ~/Linux_for_Tegra/rootfs tar --owner root --group root -cjf kernel-ovs-modules.tbz2 lib/modules popd pushd / tar -xf ~/Linux_for_Tegra/rootfs/kernel-ovs-modules.tbz2 popd Edit boot config filePermalink Edit /boot/extlinux/extlinux.conf as follows to boot from the new kernel you just built as the primary option: TIMEOUT 30 DEFAULT primary MENU TITLE L4T boot options LABEL primary MENU LABEL primary kernel LINUX /boot/Image-ovs INITRD /boot/initrd APPEND ${cbootargs} quiet root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 console=ttyS0,115200n8 console=tty0 fbcon=map:0 net.ifnames=0","title":"Sync gode with git repoPermalink"},{"location":"kernel/#when-testing-a-custom-kernel-it-is-recommended-that-you-create-a-backup-of","text":"","title":"When testing a custom kernel, it is recommended that you create a backup of"},{"location":"kernel/#the-original-kernel-and-add-a-new-entry-to-this-file-so-that-the-device-can","text":"","title":"the original kernel and add a new entry to this file so that the device can"},{"location":"kernel/#fallback-to-the-original-kernel-to-do-this","text":"","title":"fallback to the original kernel. To do this:"},{"location":"kernel/#_1","text":"","title":""},{"location":"kernel/#1-make-a-backup-of-the-original-kernel","text":"","title":"1, Make a backup of the original kernel"},{"location":"kernel/#sudo-cp-bootimage-bootimagebackup","text":"","title":"sudo cp /boot/Image /boot/Image.backup"},{"location":"kernel/#_2","text":"","title":""},{"location":"kernel/#2-copy-your-custom-kernel-into-bootimage","text":"","title":"2, Copy your custom kernel into /boot/Image"},{"location":"kernel/#_3","text":"","title":""},{"location":"kernel/#3-uncomment-below-menu-setting-lines-for-the-original-kernel","text":"","title":"3, Uncomment below menu setting lines for the original kernel"},{"location":"kernel/#_4","text":"","title":""},{"location":"kernel/#4-reboot","text":"LABEL backup MENU LABEL backup kernel LINUX /boot/Image INITRD /boot/initrd APPEND ${cbootargs} quiet root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 console=ttyS0,115200n8 console=tty0 fbcon=map:0 net.ifnames=0","title":"4, Reboot"}]}